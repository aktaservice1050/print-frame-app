<script>
  (function() {
  class PrintCustomizer {
    constructor() {
      this.selectedOptions = {
        frameType: 'print-only',
        frameStyle: 'black-matte',
        orientation: 'landscape',
        printing: 'full-color-standard',
        quantity: 1,
        price: 49,
        variantId: null, // ✅ Add this
        uploadedFile: null,
        fileObject: null
      };
  
      this.init();
    }
  
    init() {
      this.setupEventListeners();
      this.updatePreview();
      this.setInitialVariant(); // ✅ Set initial variant
    }
  
    // ✅ Set initial variant ID
    setInitialVariant() {
      const firstBtn = document.querySelector('.option-btn.active');
      if (firstBtn) {
        this.selectedOptions.variantId = firstBtn.dataset.variantId;
      }
    }
  
    setupEventListeners() {
      const self = this;
  
      // ============ FRAME TYPE (Desktop) ============
      document.querySelectorAll('.option-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          document.querySelectorAll('.option-btn').forEach(b => b.classList.remove('active'));
          this.classList.add('active');
          self.selectedOptions.frameType = this.dataset.type;
          self.selectedOptions.price = parseFloat(this.dataset.price);
          self.selectedOptions.variantId = this.dataset.variantId; // ✅
          self.updatePreview();
        });
      });
  
      // ============ FRAME TYPE (Mobile Select) ============
      const frameSelect = document.getElementById('frameTypeSelect');
      if (frameSelect) {
        frameSelect.addEventListener('change', function() {
          const selectedOption = this.options[this.selectedIndex];
  
          self.selectedOptions.frameType = selectedOption.dataset.type;
          self.selectedOptions.price = parseFloat(selectedOption.dataset.price);
          self.selectedOptions.variantId = selectedOption.value; // ✅
  
          // Sync desktop buttons
          document.querySelectorAll('.option-btn').forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.variantId === selectedOption.value) {
              btn.classList.add('active');
            }
          });
  
          self.updatePreview();
          console.log('Mobile Frame Type Changed:', self.selectedOptions);
        });
      }
  
      // ============ FRAME STYLE (Desktop) ============
      document.querySelectorAll('.style-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          document.querySelectorAll('.style-btn').forEach(b => b.classList.remove('active'));
          this.classList.add('active');
          self.selectedOptions.frameStyle = this.dataset.style;
          self.updatePreview();
        });
      });
  
      // ============ FRAME STYLE (Mobile Select) ============
      const styleSelect = document.getElementById('frameStyleSelect');
      if (styleSelect) {
        styleSelect.addEventListener('change', function() {
          self.selectedOptions.frameStyle = this.value;
  
          // Sync desktop buttons
          document.querySelectorAll('.style-btn').forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.style === this.value) {
              btn.classList.add('active');
            }
          });
  
          self.updatePreview();
          console.log('Mobile Frame Style Changed:', self.selectedOptions);
        });
      }
  
      // ============ ORIENTATION (Desktop) ============
      document.querySelectorAll('.orient-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          document.querySelectorAll('.orient-btn').forEach(b => b.classList.remove('active'));
          this.classList.add('active');
          self.selectedOptions.orientation = this.dataset.orient;
          self.updatePreview();
        });
      });
  
      // ============ ORIENTATION (Mobile Select) ============
      const orientSelect = document.getElementById('orientationSelect');
      if (orientSelect) {
        orientSelect.addEventListener('change', function() {
          self.selectedOptions.orientation = this.value;
  
          // Sync desktop buttons
          document.querySelectorAll('.orient-btn').forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.orient === this.value) {
              btn.classList.add('active');
            }
          });
  
          self.updatePreview();
          console.log('Mobile Orientation Changed:', self.selectedOptions);
        });
      }
  
      // Printing type selection
      document.querySelectorAll('input[name="printing_type"]').forEach(radio => {
        radio.addEventListener('change', function() {
          self.selectedOptions.printing = this.value;
        });
      });
  
      // Quantity controls
      const decreaseBtn = document.getElementById('decreaseQty');
      const increaseBtn = document.getElementById('increaseQty');
      const qtyInput = document.getElementById('quantity');
  
      if (decreaseBtn) {
        decreaseBtn.addEventListener('click', function() {
          if (qtyInput.value > 1) {
            qtyInput.value = parseInt(qtyInput.value) - 1;
            self.selectedOptions.quantity = qtyInput.value;
          }
        });
      }
  
      if (increaseBtn) {
        increaseBtn.addEventListener('click', function() {
          qtyInput.value = parseInt(qtyInput.value) + 1;
          self.selectedOptions.quantity = qtyInput.value;
        });
      }
  
      // File Upload
      const fileInput = document.getElementById('fileInput');
      const uploadArea = document.getElementById('uploadArea');
  
      if (uploadArea && fileInput) {
        uploadArea.addEventListener('click', function() {
          fileInput.click();
        });
  
        uploadArea.addEventListener('dragover', function(e) {
          e.preventDefault();
          uploadArea.classList.add('dragging');
        });
  
        uploadArea.addEventListener('dragleave', function() {
          uploadArea.classList.remove('dragging');
        });
  
        uploadArea.addEventListener('drop', function(e) {
          e.preventDefault();
          uploadArea.classList.remove('dragging');
          const files = e.dataTransfer.files;
          if (files.length > 0) {
            self.handleFileSelection(files[0]);
          }
        });
  
        fileInput.addEventListener('change', function() {
          if (this.files.length > 0) {
            self.handleFileSelection(this.files[0]);
          }
        });
      }
  
      // Remove file button
      document.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-file')) {
          self.removeFile();
        }
      });
  
      // Add to Cart button
      const addToCartBtn = document.getElementById('addToCartBtn');
      if (addToCartBtn) {
        addToCartBtn.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          self.addToCart();
        });
      }
    }
  
    handleFileSelection(file) {
      const maxSize = 10 * 1024 * 1024;
      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp', 'image/svg', 'application/pdf'];
  
      if (!allowedTypes.includes(file.type)) {
        alert('Please upload JPG, PNG, or PDF files only');
        return;
      }
  
      if (file.size > maxSize) {
        alert('File size must be less than 10MB');
        return;
      }
  
      const extension = file.name.split('.').pop();
      const randomName = `file_${Date.now()}_${Math.floor(Math.random() * 10000)}.${extension}`;
  
      this.selectedOptions.fileObject = file;
      this.selectedOptions.uploadedFile = randomName;
  
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const img = document.getElementById('uploadedImage');
          const placeholder = document.getElementById('placeholder');
          if (img) {
            img.src = e.target.result;
            img.style.display = 'block';
          }
          if (placeholder) {
            placeholder.style.display = 'none';
          }
        };
        reader.readAsDataURL(file);
      }
  
      document.querySelector('.upload-placeholder').style.display = 'none';
      document.getElementById('fileInfo').style.display = 'flex';
      document.querySelector('.file-name').textContent = randomName;
      document.getElementById('addToCartBtn').disabled = false;
  
      this.showToast('✅ File selected! Click "Add to cart" to upload.');
    }
  
    async uploadToS3(file) {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('shop', window.Shopify?.shop || 'unknown');
  
      try {
        const response = await fetch('/apps/upload-url/api/upload', {
          method: 'POST',
          body: formData,
        });
  
        const result = await response.json();
  
        if (result.success) {
          console.log('S3 Upload successful:', result.fileUrl);
          return result.fileUrl;
        } else {
          throw new Error(result.error || 'Upload failed');
        }
      } catch (error) {
        console.error('S3 upload error:', error);
        throw error;
      }
    }
  
    removeFile() {
      this.selectedOptions.uploadedFile = null;
      this.selectedOptions.fileObject = null;
      const fileInput = document.getElementById('fileInput');
      const uploadedImage = document.getElementById('uploadedImage');
      const placeholder = document.getElementById('placeholder');
  
      if (fileInput) fileInput.value = '';
      if (uploadedImage) uploadedImage.style.display = 'none';
      if (placeholder) placeholder.style.display = 'flex';
  
      document.querySelector('.upload-placeholder').style.display = 'block';
      document.getElementById('fileInfo').style.display = 'none';
      document.getElementById('addToCartBtn').disabled = true;
    }
  
    updatePreview() {
      const preview = document.getElementById('framePreview');
      const frameType = this.selectedOptions.frameType;
      const frameStyle = this.selectedOptions.frameStyle;
      const orientation = this.selectedOptions.orientation;
  
      if (preview) {
        preview.className = 'frame-preview ' + frameType + ' ' + frameStyle + ' ' + orientation;
      }
    }
  
    async addToCart() {
      if (!this.selectedOptions.fileObject) {
        this.showToast('⚠️ Please select a file first!', true);
        return;
      }
  
      const addToCartBtn = document.getElementById('addToCartBtn');
      addToCartBtn.disabled = true;
      addToCartBtn.textContent = 'Uploading...';
  
      try {
        const fileUrl = await this.uploadToS3(this.selectedOptions.fileObject);
  
        if (!fileUrl) throw new Error('File upload failed');
  
        addToCartBtn.textContent = 'Adding to cart...';
  
        // ✅ Use stored variant ID
        let variantId = this.selectedOptions.variantId;
  
        if (!variantId) {
          console.error('Variant ID not found');
          throw new Error('Variant ID not found');
        }
  
        console.log('✅ Using Variant ID:', variantId);
  
        const cartData = {
          id: variantId,
          quantity: this.selectedOptions.quantity,
          properties: {
            'Frame Type': this.selectedOptions.frameType,
            'Frame Style': this.selectedOptions.frameStyle,
            'Orientation': this.selectedOptions.orientation,
            'Printing': this.selectedOptions.printing,
            'File Name': this.selectedOptions.uploadedFile,
            'File URL': fileUrl
          }
        };
  
        const res = await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(cartData)
        });
  
        if (!res.ok) throw new Error('Failed to add to cart');
  
        const data = await res.json();
        console.log('✅ Added to cart:', data);
  
        this.showToast('✅ Product added to cart successfully!');
  
        setTimeout(() => {
          window.location.href = '/cart';
        }, 1000);
  
      } catch (error) {
        console.error('Add to cart error:', error);
        this.showToast('⚠️ Something went wrong. Please try again.', true);
      } finally {
        addToCartBtn.disabled = false;
        addToCartBtn.textContent = 'Add to cart';
      }
    }
  
    showToast(message, isError = false) {
      const toast = document.createElement('div');
      toast.textContent = message;
      toast.style.position = 'fixed';
      toast.style.bottom = '30px';
      toast.style.right = '30px';
      toast.style.padding = '12px 18px';
      toast.style.borderRadius = '8px';
      toast.style.background = isError ? '#e74c3c' : '#2ecc71';
      toast.style.color = '#fff';
      toast.style.fontSize = '15px';
      toast.style.boxShadow = '0 2px 6px rgba(0,0,0,0.2)';
      toast.style.zIndex = '9999';
      toast.style.opacity = '0';
      toast.style.transition = 'opacity 0.3s ease';
      document.body.appendChild(toast);
      setTimeout(() => (toast.style.opacity = '1'), 50);
      setTimeout(() => {
        toast.style.opacity = '0';
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new PrintCustomizer());
  } else {
    new PrintCustomizer();
  }
  })();
</script>