<script>
  (function() {
  class PrintCustomizer {
    constructor() {
      this.selectedOptions = {
        frameType: 'print-only',
        frameStyle: 'black-matte',
        orientation: 'landscape',
        printing: 'full-color-standard',
        quantity: 1,
        price: 49,
        uploadedFile: null,
        fileObject: null // Store the actual file object for later upload
      };
  
      this.init();
    }
  
    init() {
      this.setupEventListeners();
      this.updatePreview();
    }
  
    setupEventListeners() {
      const self = this;
  
      // Frame Type selection
      document.querySelectorAll('.option-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          document.querySelectorAll('.option-btn').forEach(b => b.classList.remove('active'));
          this.classList.add('active');
          self.selectedOptions.frameType = this.dataset.type;
          self.selectedOptions.price = parseInt(this.dataset.price);
          self.updatePreview();
        });
      });
  
      // Frame Style selection
      document.querySelectorAll('.style-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          document.querySelectorAll('.style-btn').forEach(b => b.classList.remove('active'));
          this.classList.add('active');
          self.selectedOptions.frameStyle = this.dataset.style;
          self.updatePreview();
        });
      });
  
      // Orientation selection
      document.querySelectorAll('.orient-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          document.querySelectorAll('.orient-btn').forEach(b => b.classList.remove('active'));
          this.classList.add('active');
          self.selectedOptions.orientation = this.dataset.orient;
          self.updatePreview();
        });
      });
  
      // Printing type selection
      document.querySelectorAll('input[name="printing_type"]').forEach(radio => {
        radio.addEventListener('change', function() {
          self.selectedOptions.printing = this.value;
        });
      });
  
      // Quantity controls
      const decreaseBtn = document.getElementById('decreaseQty');
      const increaseBtn = document.getElementById('increaseQty');
      const qtyInput = document.getElementById('quantity');
  
      if (decreaseBtn) {
        decreaseBtn.addEventListener('click', function() {
          if (qtyInput.value > 1) {
            qtyInput.value = parseInt(qtyInput.value) - 1;
            self.selectedOptions.quantity = qtyInput.value;
          }
        });
      }
  
      if (increaseBtn) {
        increaseBtn.addEventListener('click', function() {
          qtyInput.value = parseInt(qtyInput.value) + 1;
          self.selectedOptions.quantity = qtyInput.value;
        });
      }
  
      // File Upload - Only preview locally, don't upload yet
      const fileInput = document.getElementById('fileInput');
      const uploadArea = document.getElementById('uploadArea');
  
      if (uploadArea && fileInput) {
        uploadArea.addEventListener('click', function() {
          fileInput.click();
        });
  
        uploadArea.addEventListener('dragover', function(e) {
          e.preventDefault();
          uploadArea.classList.add('dragging');
        });
  
        uploadArea.addEventListener('dragleave', function() {
          uploadArea.classList.remove('dragging');
        });
  
        uploadArea.addEventListener('drop', function(e) {
          e.preventDefault();
          uploadArea.classList.remove('dragging');
          const files = e.dataTransfer.files;
          if (files.length > 0) {
            self.handleFileSelection(files[0]);
          }
        });
  
        fileInput.addEventListener('change', function() {
          if (this.files.length > 0) {
            self.handleFileSelection(this.files[0]);
          }
        });
      }
  
      // Remove file button
      document.addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-file')) {
          self.removeFile();
        }
      });
  
      // Add to Cart button
      const addToCartBtn = document.getElementById('addToCartBtn');
      if (addToCartBtn) {
        addToCartBtn.addEventListener('click', function(e) {
          e.preventDefault(); // Prevent any default form submission
          e.stopPropagation(); // Stop event from bubbling to theme scripts
          self.addToCart();
        });
      }
    }
  
    // Handle file selection without uploading
    handleFileSelection(file) {
      const maxSize = 10 * 1024 * 1024; // 10MB
      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp', 'image/svg', 'application/pdf'];
  
      // Validate file type
      if (!allowedTypes.includes(file.type)) {
        alert('Please upload JPG, PNG, or PDF files only');
        return;
      }
  
      // Validate file size
      if (file.size > maxSize) {
        alert('File size must be less than 10MB');
        return;
      }
  
      // Generate random file name with original extension
      const extension = file.name.split('.').pop(); // get extension
      const randomName = `file_${Date.now()}_${Math.floor(Math.random() * 10000)}.${extension}`;
  
      // Store file object with new name for later upload
      this.selectedOptions.fileObject = file;
      this.selectedOptions.uploadedFile = randomName; // use random name
  
      // Preview image if it's an image file
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const img = document.getElementById('uploadedImage');
          const placeholder = document.getElementById('placeholder');
          img.src = e.target.result;
          img.style.display = 'block';
          placeholder.style.display = 'none';
        };
        reader.readAsDataURL(file);
      }
  
      // Update UI to show file is selected
      document.querySelector('.upload-placeholder').style.display = 'none';
      document.getElementById('fileInfo').style.display = 'flex';
      document.querySelector('.file-name').textContent = randomName; // show new name
      document.getElementById('addToCartBtn').disabled = false;
  
      this.showToast('✅ File selected! Click "Add to cart" to upload.');
    }
  
  
    // Upload file to S3
    async uploadToS3(file) {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('shop', window.Shopify?.shop || 'unknown');
  
      try {
        const response = await fetch('/apps/upload-url/api/upload', {
          method: 'POST',
          body: formData,
        });
  
        const result = await response.json();
  
        if (result.success) {
          console.log('S3 Upload successful:', result.fileUrl);
          return result.fileUrl;
        } else {
          throw new Error(result.error || 'Upload failed');
        }
      } catch (error) {
        console.error('S3 upload error:', error);
        throw error;
      }
    }
  
    // Remove selected file
    removeFile() {
      this.selectedOptions.uploadedFile = null;
      this.selectedOptions.fileObject = null;
      document.getElementById('fileInput').value = '';
      document.getElementById('uploadedImage').style.display = 'none';
      document.getElementById('placeholder').style.display = 'flex';
      document.querySelector('.upload-placeholder').style.display = 'block';
      document.getElementById('fileInfo').style.display = 'none';
      document.getElementById('addToCartBtn').disabled = true;
    }
  
    // Update frame preview based on selections
    updatePreview() {
      const preview = document.getElementById('framePreview');
      const frameType = this.selectedOptions.frameType;
      const frameStyle = this.selectedOptions.frameStyle;
      const orientation = this.selectedOptions.orientation;
  
      preview.className = 'frame-preview ' + frameType + ' ' + frameStyle + ' ' + orientation;
    }
  
    // Add product to cart with file upload ===============================================================
   // Add product to cart with file upload
    async addToCart() {
      // Check if file is selected
      if (!this.selectedOptions.fileObject) {
        this.showToast('⚠️ Please select a file first!', true);
        return;
      }
  
      const addToCartBtn = document.getElementById('addToCartBtn');
      addToCartBtn.disabled = true;
      addToCartBtn.textContent = 'Uploading...';
  
      try {
        // Step 1: Upload file to S3
        const fileUrl = await this.uploadToS3(this.selectedOptions.fileObject);
  
        if (!fileUrl) throw new Error('File upload failed');
  
        addToCartBtn.textContent = 'Adding to cart...';
  
        // Step 2: Dynamically find the correct variant ID
        let variantId = null;
  
        // ✅ If product has variant select dropdown
        const variantSelect = document.querySelector('select[name="id"]');
        if (variantSelect && variantSelect.value) {
          variantId = variantSelect.value;
        }
  
        // ✅ If variant buttons exist (radio or button-based system)
        if (!variantId) {
          const activeVariant = document.querySelector('[data-variant-id].active');
          if (activeVariant) {
            variantId = activeVariant.dataset.variantId;
          }
        }
  
        // ✅ Fallbacks
        if (!variantId && typeof Shopify !== 'undefined' && Shopify?.product?.variants?.length) {
          // If only one variant
          variantId = Shopify.product.variants[0].id;
        }
  
        // ✅ Last fallback: try ShopifyAnalytics meta
        if (!variantId && typeof ShopifyAnalytics !== 'undefined' && ShopifyAnalytics.meta) {
          variantId = ShopifyAnalytics.meta.product?.variants?.[0]?.id;
        }
  
        if (!variantId) {
          console.error('Variant ID not found');
          throw new Error('Variant ID not found');
        }
  
        // Step 3: Add to cart
        const cartData = {
          id: variantId,
          quantity: this.selectedOptions.quantity,
          properties: {
            'Frame Type': this.selectedOptions.frameType,
            'Frame Style': this.selectedOptions.frameStyle,
            'Orientation': this.selectedOptions.orientation,
            'Printing': this.selectedOptions.printing,
            'File Name': this.selectedOptions.uploadedFile,
            'File URL': fileUrl,
            // 'Price': `${this.selectedOptions.price}`
          }
        };
  
        const res = await fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(cartData)
        });
  
        if (!res.ok) throw new Error('Failed to add to cart');
  
        const data = await res.json();
        console.log('✅ Added to cart:', data);
  
        this.showToast('✅ Product added to cart successfully!');
  
        // Optional: Redirect to cart page
        setTimeout(() => {
          window.location.href = '/cart';
        }, 1000);
  
      } catch (error) {
        console.error('Add to cart error:', error);
        this.showToast('⚠️ Something went wrong. Please try again.', true);
      } finally {
        addToCartBtn.disabled = false;
        addToCartBtn.textContent = 'Add to cart';
      }
    }
  
  // ==========================================================================================
  
    // Show toast notification
    showToast(message, isError = false) {
      const toast = document.createElement('div');
      toast.textContent = message;
      toast.style.position = 'fixed';
      toast.style.bottom = '30px';
      toast.style.right = '30px';
      toast.style.padding = '12px 18px';
      toast.style.borderRadius = '8px';
      toast.style.background = isError ? '#e74c3c' : '#2ecc71';
      toast.style.color = '#fff';
      toast.style.fontSize = '15px';
      toast.style.boxShadow = '0 2px 6px rgba(0,0,0,0.2)';
      toast.style.zIndex = '9999';
      toast.style.opacity = '0';
      toast.style.transition = 'opacity 0.3s ease';
      document.body.appendChild(toast);
      setTimeout(() => (toast.style.opacity = '1'), 50);
      setTimeout(() => {
        toast.style.opacity = '0';
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new PrintCustomizer());
  } else {
    new PrintCustomizer();
  }
  })();
</script>